{
  "hash": "c55a630d0bdbf5e567db272511a32002",
  "result": {
    "markdown": "---\ntitle: \"Drawing a UML Sequence Diagram\"\ndescription: |\n  Search for the way to draw a UML sequence diagram.\nauthor:\n  - name: Emi Tanaka\n    url: https://emitanaka.org\n    affiliation: Monash University\n    affiliation_url: https://numbat.space/\ndate: 01-29-2021\ncategories: [visualisation, diagram]\nformat:\n  html:\n    toc: true\n    toc_float: true\n---\n\n\n\n\nA **sequence diagram**, as described in [wikipedia](https://en.wikipedia.org/wiki/Sequence_diagram), shows objects interactions arranged in time sequence.  One of the standards for drawing this is using the **Unified Modelling Language** (UML) managed by the Object Management Group (OMG). \n\nUML was developed in the field of software engineering to provide a standard way to visualise the design of a system. It's a language that describes standards for all sorts of diagrams, not just the sequence diagram, e.g. communication diagram, interaction overview diagram and so on. \n\nThe interaction of _actors_ with the system depicted as _objects_ with passage of time depicted as a vertical dotted line (a.k.a. lifeline) seemed like a good fit to use for illustrating the concept of [edibble](https://edibble.emitanaka.org/).\n\n## Omnigraffle\n\nI always find drawing complicated diagrams to be tricky via programming so I initially drew the diagram using OmniGraffle. There were some UML stencils and I thought it was going well (result in Figure \\@ref(fig:omni)). Aligning the objects as a sequence diagram, even with OmniGraffle's precise object placement, was a bit difficult but it got the job done in the end. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Drawn using OmniGraffle](seq-diag-omnigraffle.png){fig-align='center' width=432}\n:::\n:::\n\n\nThen I wanted to change and reorder some elements of the diagram. It's already taken me half a day to make a Figure \\@ref(fig:omni), I really didn't want to repeat the process. Surely, there must be another tool that will make this easier? \n\n## Online tools\n\nAnd thus began my journey (and what felt like a rabbit hole) in finding other tools to draw a sequence diagram. I found several online mapping solutions including [Lucidchart](https://www.lucidchart.com/pages/examples/uml_diagram_tool) and [Visual Paradigm](https://online.visual-paradigm.com/diagrams/features/uml-tool/) but it wasn't what I was after. Eventually I came across [GitMind](https://gitmind.com/). It was the most promising to me: it has a nice user interface, the features that I want and it happened to be completely free! It was easier than OmniGraffle to make sequence diagrams. You can find the result of the drawing in Figure \\@ref(fig:gitmind).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Drawn using GitMind.](seq-diagram-eg.png){fig-align='center' width=861}\n:::\n:::\n\n\nOne thing to keep in mind is that the font for the PDF version is not rendered correctly. This is perhaps I've chosen a font available only in my system (\"Fira Code\").\n\nOkay, looks like I'm good with this. Let's use this in the edibble documentation... Wait the interaction between the _statisitican_ and _Design_ doesn't fit the narrative well, I need to modify the diagram again!\n\nThis was a point when I realise I really need to programmatically create the diagram. Being somewhat of an anti click-and-point statistical software, I should have perhaps pursued the programmatic route earlier. \n\n## R\n\nThe most comprehensive R-package to draw a diagram is [DiagrammeR](https://rich-iannone.github.io/DiagrammeR/). When you go to the website (which has an impressively interface) it has the tagline \"Sometimes You Want To Create Nice Diagrams: WHY NOT DO THAT WITH R?\". That's a good question to ask past Emi.\n\n### DiagrammeR\n\nUnder the hood, DiagrammeR it's powered by **Graphviz** and **mermaid**. [Sequence diagrams are supported by mermaid](https://mermaid-js.github.io/mermaid/#/sequenceDiagram) but there seems to be no distinguishment between an actor and an object. It seems like you always have to a message when actor/object is interacting.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nDiagrammeR::mermaid(\"\nsequenceDiagram\n    domain expert->>statistician: consult\n    statistician-->>domain expert: query\n    statistician->>Design: start_design()\n    statistician->>Design: set_units()\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-47e5df22eced381cc705\" style=\"width:100%;height:464px;\" class=\"DiagrammeR html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-47e5df22eced381cc705\">{\"x\":{\"diagram\":\"\\nsequenceDiagram\\n    domain expert->>statistician: consult\\n    statistician-->>domain expert: query\\n    statistician->>Design: start_design()\\n    statistician->>Design: set_units()\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nDrawn using mermaid via DiagrammeR\n:::\n:::\n\n\nIt's fairly good and you can further customise the look using CSS, but it doesn't have the actor symbol and some other standard UML symbols, it will be too much effort by me to recreate what I made using GitMind.\n\n### nomnoml\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Drawn using nomnoml.com](nomnoml.png){fig-align='center' width=623}\n:::\n:::\n\n\nThe [nomnoml R-package](https://github.com/rstudio/nomnoml) describes itself as a Sassy UML Diagrams for R. It's powered by the [nomnoml tool](https://nomnoml.com/) which has a nice simple website to create the diagrams you want. I quite enjoy using the website version where the graph renders instantenously using a simple syntax. The graph made using the web (Figure \\@ref(fig:nomnoml)) is different to the one produced via R shown below along with the nomnoml syntax. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.nomnoml .cell-code}\n[<actor>domain expert] -- [<hidden> fin1]\n[<actor>statistician] -- [<hidden> fin2]\n[design] -- [<end> end]\n[<database> data] -- [<hidden> hid]\n[<actor>technician] -- [<hidden> fin3]\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-820c72e0436b4564e5d5\" style=\"width:100%;height:464px;\" class=\"nomnoml html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-820c72e0436b4564e5d5\">{\"x\":{\"code\":\"\\n#fill: #FEFEFF\\n#lineWidth: 1\\n#zoom: 4\\n#direction: right\\n\\n[<actor>domain expert] -- [<hidden> fin1]\\n[<actor>statistician] -- [<hidden> fin2]\\n[design] -- [<end> end]\\n[<database> data] -- [<hidden> hid]\\n[<actor>technician] -- [<hidden> fin3]\",\"svg\":false,\"png\":null},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nDrawn using nomnoml\n:::\n:::\n\n\nIt turns out thought that the nomnoml [doesn't support sequence diagrams](https://github.com/skanaar/nomnoml/issues/1) and it doesn't look like it will support it any time either. \n\n### plantuml\n\nI came across another R-package for UML diagrams called [plantuml](https://github.com/rkrug/plantuml). It's powered by the the [plantUML tool](https://plantuml.com/) which has a [extensive support for a sequence diagram](https://plantuml.com/sequence-diagram) (yes!). \n\nThis one is not on CRAN yet. I initially had trouble getting it to work but managed to work re-installing GraphViz. I could get the example code to work but the code for sequence diagram didn't work for me so I used the online version of plantUML directly. \n\nI expanded a lot more than previous graphs with plantUML code below. The problem I realise now is that the image has become too big and too much text to be concise. So I'll have to tweak some more (when does this end?). At least now making an adjustment isn't hard this time!\n\n```\n@startuml\nactor \"domain expert\" as expert #fff\nactor statistician as stat #AD0059\nparticipant design as design #fff\ndatabase data as data #fff\nactor technician as tech #fff\n== Conceptualizing the experiment ==\ngroup Consultation\nexpert -> stat: I want to test which wheat variety is best\nstat -> design: library(edibble)\\nstart_design(name = \"wheat\")\nactivate design\nstat -> design: set_context(aim = \"identify best variety\")\nstat -> expert: What varieties are you testing?\nexpert -->> stat: I'm testing Mace and RockStar\nstat -> design: set_trts(var = c(\"Mace\", \"RockStar\"))\nexpert -->> stat: I have a field with 20 plots each at Narrabri and\\n10 plots at Roseworthy that I can use for testing\nstat -> design: set_units(site = c(\"Narrabri\", \"Roseworthy\"),\\n.               plot = nested_in( site,\\n                                    \"Narrabri\" ~ 20,\\n                              \"Roseworthy\" ~ 10))\nstat -> expert: What do you consider as \"best\"?\nexpert -> stat: For now, I just want to select one that'll give me\\nthe highest yield.\nstat -> design: set_rcrds(yield = plot)\nstat -> expert: What's range of values do you expect for the yield?\nexpert -->> stat: Well it never goes over 10 tonnes per hectre in my fields!\nstat -> design: expect_rcrds(yield = to_be_numeric( with_value( between = c(0, 10))))\nstat -> expert: Do you have any restrictions in allocation of varieties at site or plots?\nexpert -->> stat: No.\nstat -> design: allocate_trts(var ~ plot)\nstat -> design: plot()\ndesign -->> stat\nstat -> expert: Well, this is my current understanding of the structure.\\nHave I understood it correctly?\nexpert -->> stat: That looks right.\nstat -->> expert: Okay I'll send the design when it's ready.\nend \nstat -> design: **randomise_trts()**\nstat -> design: serve_table()\ndesign -> data: export_design()\nactivate data\ndeactivate design\nstat -> design !!: end session\nexpert -> data: inspect\ntech -> data: inquire\ntech -> data: data entry\ngroup opt [invalid entry]\ndata -->> tech: error\nend\n== Import data and analyse==\n@enduml\n```\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Drawn using plantUML](seq-diag-uml.png){fig-align='center' width=668}\n:::\n:::\n\n\nIn the end the solution wasn't quite R, but perhaps it will be when the plantuml package upgrades or other solutions are developed.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/d3-3.3.8/d3.min.js\"></script>\n<script src=\"../../site_libs/dagre-0.4.0/dagre-d3.min.js\"></script>\n<link href=\"../../site_libs/mermaid-0.3.0/dist/mermaid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/mermaid-0.3.0/dist/mermaid.slim.min.js\"></script>\n<link href=\"../../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/chromatography-0.1/chromatography.js\"></script>\n<script src=\"../../site_libs/DiagrammeR-binding-1.0.9/DiagrammeR.js\"></script>\n<script src=\"../../site_libs/es6shim-0.35.6/es6shim.js\"></script>\n<script src=\"../../site_libs/es7shim-6.0.0/es7shim.js\"></script>\n<script src=\"../../site_libs/graphre-0.1.3/graphre.js\"></script>\n<script src=\"../../site_libs/nomnoml-1.4.0/nomnoml.js\"></script>\n<script src=\"../../site_libs/nomnoml-binding-0.2.5/nomnoml.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}